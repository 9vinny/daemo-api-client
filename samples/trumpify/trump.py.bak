import os
import sys
from threading import Thread

from twitter import *

sys.path.append(os.path.abspath('../../'))

CREDENTIALS_FILE = '.credentials'

PROJECT_ID = 47

TW_CONSUMER_KEY = 'DsrLkapnW62Jh9CrSGowhHrFz'
TW_CONSUMER_SECRET = '2GqubzcNN11x3P3IZjDgL2wRW0tERzG1rG67ydmVR5Uh0Ctk4E'
TW_ACCESS_TOKEN = '746086097109688320-F46uQCNnFiZOUki8EfbAZpzrIoUUbxS'
TW_ACCESS_TOKEN_SECRET = 'aGUiYsBAYyS9J3uTU4sZl4dID9PcpnUUZOEX5YKDAEoJL'

TWITTER_ID = '1339835893'
TWITTER_NAME = 'HillaryClinton'


class TwitterClient:
    def __init__(self):
        from daemo.client import Client

        print "Initializing Twitter Client..."

        self.auth = OAuth(
            consumer_key=TW_CONSUMER_KEY,
            consumer_secret=TW_CONSUMER_SECRET,
            token=TW_ACCESS_TOKEN,
            token_secret=TW_ACCESS_TOKEN_SECRET
        )

        self.stream = TwitterStream(auth=self.auth)
        self.messages = self.stream.statuses.filter(follow=TWITTER_ID)

        self.client = Client(CREDENTIALS_FILE)

        for message in self.messages:
            if message.get('text', None) is not None \
                    and 'RT' not in message.get('text') \
                    and message.get('user') is not None \
                    and message.get('user').get('id', 0) == int(TWITTER_ID):

                text = message.get('text')
                id = message.get('id')

                prefix = '@%s ' % TWITTER_NAME
                if text.lower().startswith(prefix.lower()) and len(text) > 40:
                    text = text[len(prefix):]

                    self.client.add_data(project_id=PROJECT_ID, data={"tasks": [{
                        "tweet": text, "id": id
                    }]})


auth = OAuth(
    consumer_key=TW_CONSUMER_KEY,
    consumer_secret=TW_CONSUMER_SECRET,
    token=TW_ACCESS_TOKEN,
    token_secret=TW_ACCESS_TOKEN_SECRET
)
twitter_push = Twitter(auth=auth)


def approve(result):
    assert result is not None and result.get('results', None) is not None
    text = result.get('results')[0].get('result')
    return len(text) > 10


def completed(result):
    assert result is not None and result.get('results', None) is not None
    text = result.get('results')[0].get('result')

    try:
        twitter_push.statuses.update(status=text)
    except Exception as e:
        pass


class DaemoClient:
    def __init__(self):
        from daemo.client import Client

        print "Initializing Daemo Client..."

        self.client = Client(CREDENTIALS_FILE)
        self.client.publish(project_id=PROJECT_ID, approve=approve, completed=completed, stream=True)


t1 = Thread(target=TwitterClient)
t2 = Thread(target=DaemoClient)

t1.start()
t2.start()
t1.join()
t2.join()
